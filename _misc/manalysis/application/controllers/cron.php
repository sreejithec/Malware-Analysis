<?php //if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Cron extends CI_Controller {
	
	const ANALYSIS_STATUS_NEW = 0;
	const ANALYSIS_STATUS_COMPLETED = 1;
	const ANALYSIS_STATUS_QUEUE = 2;
	
	private $_config;
	private $_server_config;
	private $_sanbox_config_file;
	private $_malware_save_path;
	
	public function __construct(){
		parent::__construct();
		
		$this->load->model('cron_model');
		$this->load->model('malware_model');
		$this->load->model('analysis_model');
		
		$this->_sanbox_config_file = APPPATH.'config/sandbox_config'.EXT;
		$this->_malware_save_path = 'dionaea_binaries';
		
		$this->load_config();
	}
	

	public function load_config(){
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
			$this->_config = $config;
			$this->_server_config = $config_servers;
		}
	}
	
	
	/**
	 * Submitting the Malware for Analysis
	 * Cron set for every 5 minutes
	 *
	 */
	public function analysis_submit(){
		$config = $this->_config;
		
		//Get the files with is_analyzed = 0 in malware_file table
		$to_analyze = $this->malware_model->getByAnalysisStatus(self::ANALYSIS_STATUS_NEW);
		
		if(count($to_analyze)){
			$this->load->library('sandbox');
			try{
				foreach ($to_analyze as $file){
					
					foreach ($config as $server_id => $server){
						// Send the file to Sanbbox Servers
						$response = $this->sandbox->send($server['protocol'], $server['submit_url'], $file->file_name, $file->email_sender);
						// Enter these files into analysis_queue table
						$data = array('sandbox_id'=> $server_id,'file_name'=> $file->file_name,'analysis_status' => self::ANALYSIS_STATUS_QUEUE, 'submit_response' => $response);
						$this->analysis_model->saveAnalysisSubmitData($data);
						// Set the status of these files to is_analysed = 2 (means in queue)
						$this->malware_model->updateAnalysisStatusByFileName($file->file_name, self::ANALYSIS_STATUS_QUEUE );

						break;
					}
					break;
				}

			}
			catch (Exception $e){
				
			}
			
			
			
			
		}
		
		p('hai');exit;
		
	}
	
	
	
	public function analysis_results(){
		//Get the files in analysis_queue table
		
		//Loop over them and check for MD5 
			
			// If MD5 matches in the result, store the data in analysis_results table
			// Remove the file name from analysis table
			// Set the status of the file to is_analyzed = 1 (means analysis completed)
		
	}
	
}


?>