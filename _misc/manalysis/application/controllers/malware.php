<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Malware extends QCERT_Controller {
	
	const ANALYSIS_STATUS_NEW = 0;
	const ANALYSIS_STATUS_COMPLETED = 1;
	const ANALYSIS_STATUS_QUEUE = 2;
	
	private $_collection;
	private $_malware_save_path;
	
	
	
	private $_config;
	private $_server_config;
	private $_sanbox_config_file;
	
	public function __construct(){
		parent::__construct();
		$this->load->model('malware_model');
		
		$this->_malware_save_path = 'dionaea_binaries';
		if(!$this->_validate_folder_permission()){
			if(!chmod($this->_malware_save_path, '0666')){
				die('Please set the permissions of dionaea_binaries folder to 0666');
			}
		}
		
		$this->load->model('cron_model');
		$this->load->model('analysis_model');
		
		$this->_sanbox_config_file = APPPATH.'config/sandbox_config'.EXT;
	}
	
	
	public function all($page=1){
		$page = ($page) ? (int)$page : 1;
		
		$this->malware_model->start  = $this->malware_model->limit = NULL;
		$this->paginate(count($this->malware_model->getCollection()), base_url().'malware/all');
		
		$this->malware_model->start  = ((int)$this->uri->segment(PAGE_SEGMENT)) ? $this->uri->segment(PAGE_SEGMENT) : 0;
		$this->malware_model->limit = PER_PAGE;
		
		
		
		$data['collection'] = $this->malware_model->getCollection($page);
		$this->render('malware/all',$data);
	}
	
	public function doSearch(){
		if($this->input->post('go') == 'Search'){
			$keyword = url_base64_encode(trim($this->input->post('q')));
			redirect(base_url().'malware/search/'.$keyword);			
		}
	}
	
	
	public function search($keyword, $page=1){
		$this->malware_model->start  = $this->malware_model->limit = NULL;
		$keyword = url_base64_decode($keyword);
		
		$this->_collection = $this->malware_model->getSearchResults($keyword);
		
		$this->paginate(count($this->_collection), base_url().'malware/search/'.url_base64_encode($keyword).'/', 4);
		
		$this->malware_model->start  = ((int)$this->uri->segment(4)) ? $this->uri->segment(4) : 0;
		$this->malware_model->limit = PER_PAGE;
		
		$data['collection'] = $this->malware_model->getSearchResults($keyword);
		
		$this->render('malware/all', $data);
	}

	public function save_file(){
		$str = "--------------------------------------------------\n";
		$str .= print_r($_POST, TRUE);
		$str .= print_r($_FILES, TRUE);
		$str .= "\n--------------------------------------------------\n";
		$this->malware_model->write_log('info',$str);
		$this->load->helper('file');
		$email = $this->input->post('email');
		
		//get the uploaded file
		if($_FILES['upfile']['tmp_name']){
			$malware_file_content = read_file($_FILES['upfile']['tmp_name']);
			$file_name = md5($malware_file_content);echo $file_name;
			if(!$this->malware_model->is_duplicate($file_name)){
				if($this->malware_model->do_upload($file_name, $this->_malware_save_path.'/')){
					$received_date	= date('Y-m-d H:i:s');
					$ins = array('email_sender' => $email, 'file_name' => $file_name, 'received_date' => date('Y-m-d H:i:s'),'is_analyzed'=> self::ANALYSIS_STATUS_NEW ,'m_count'=>1);
					$this->malware_model->save_file($ins);
					
					// Send the malware to Sandbox servers
					$this->_malware_submit($ins);
										
					return TRUE;
				}
			}else{
				$this->malware_model->increment_malware_count($file_name);
				return TRUE;
			}
		}
		
	}
	
	public function _validate_folder_permission(){
		//get the malware save path permission
		//return ('0666' === substr(sprintf('%o', fileperms($this->_malware_save_path)),-4));
		return TRUE;
	}
	
	public function _malware_submit($file){
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
		}
		$this->load->library('sandbox');
		try{
			foreach ($config as $sandbox_id => $server){
				// Send the file to Sanbbox Servers
				$response = $this->sandbox->send($server['protocol'], $server['submit_url'], $file['file_name'], $file['email_sender']);
				// Enter these files into analysis_queue table
				$data = array('sandbox_id'=> $sandbox_id,'file_name'=> $file['file_name'],'analysis_status' => self::ANALYSIS_STATUS_QUEUE, 'submit_response' => $response);
				$this->analysis_model->saveAnalysisSubmitData($data);
				// Set the status of these files to is_analysed = 2 (means in queue)
				$this->malware_model->updateAnalysisStatusByFileName($file['file_name'], self::ANALYSIS_STATUS_QUEUE );

				break;
			}
		}
		catch (Exception $e){
		}
	}
	
	
	public function analysis_reports(){
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
		}
		$this->load->library('sandbox');


		// Get the files in queue
		$queue = $this->analysis_model->getByAnalysisStatus(self::ANALYSIS_STATUS_QUEUE );
		try{
			if($queue){
				foreach ($queue as $file)	{
					$sandbox_id = $file->sandbox_id;
					$response = $this->sandbox->fetch_report($config[$sandbox_id]['protocol'], $config[$sandbox_id]['poll_url'], $file->file_name);
					if($response){
						$data = array('analysis_status' => self::ANALYSIS_STATUS_COMPLETED, 'report' => $response);
					}else{
						$data = array('report' => 'REPORT_NOT_FOUND');
					}
					$this->malware_model->updateAnalysisStatusByFileName($file->file_name, self::ANALYSIS_STATUS_COMPLETED );
					$this->analysis_model->saveAnalysisSubmitData($data, $file->file_name);
				}
			}
		}
		catch (Exception $e){

		}
		
	}
	
	
	public function view_report($file_name){
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
		}
		$data = array();
		$file = $this->malware_model->getByFileName($file_name);
		if($file) {
			$data = array(
			'file_name' => $file->file_name,
			'email_sender' => $file->email_sender,
			'received_date' => $file->received_date,
			'is_analyzed'   => $file->is_analyzed,
			'm_count'       => $file->m_count
			);
			foreach ($config as $sandbox_id => $server){
				$data['sandboxes'][] = $sandbox_id;
				$sandbox_url = $config[$sandbox_id]['base_url'];
				$report = $this->analysis_model->getReportByServerId($file_name, $sandbox_id);
				if($sandbox_id == 'sandbox1' && $report && ($report != 'REPORT_NOT_FOUND')){
					list($analysis_id,$file_name, $file_md5,$xml_url,$cab_url,$pcap_url,$date_created,$dbt_bit_array) = explode(',',$report);
					$data['sandbox1']['name'] = $config[$sandbox_id]['name'];
					$data['sandbox1']['base_url'] = $config[$sandbox_id]['base_url'];
					
					$data['sandbox1']['analysis_id'] = $analysis_id;
					if($cab_url) $data['sandbox1']['cab_url'] = $sandbox_url.$cab_url;
					if($pcap_url) $data['sandbox1']['pcap_url'] = $sandbox_url.$pcap_url;
					if($date_created) $data['sandbox1']['date_created'] = $date_created;
					if($dbt_bit_array) $data['sandbox1']['dbt_bit_array'] = $dbt_bit_array;

					if($xml_url) $data['sandbox1']['xml_data'] = $this->analysis_model->parseReportXml($sandbox_url.'/data/0-10000/1791/1791.xml', $file_name);//$xml_url);


				}

			}
			$this->render('malware/view_report', $data);
		}
	}
	
	public function getProcessInfo($file_name, $sandbox_id, $process_index, $section){
		$data = array();
		
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
		}
		$sandbox_url = $config[$sandbox_id]['base_url'];
		$report = $this->analysis_model->getReportByServerId($file_name, $sandbox_id);
		list($analysis_id,$file_name, $file_md5,$xml_url,$cab_url,$pcap_url,$date_created,$dbt_bit_array) = explode(',',$report);
		if($xml_url) $data = $this->analysis_model->getProcessInfo($sandbox_url.'/data/0-10000/1791/1791.xml',$file_name,$process_index, $section);//$xml_url);
		$data['section'] = $section;
		if(count($data) > 0){
			$this->load->view('malware/view_report_section', $data);
		}
		
	}
	
	
	public function getSocketInfo($file_name, $sandbox_id, $process_index, $section){
		$data = array();
		
		if($this->_sanbox_config_file){
			include_once($this->_sanbox_config_file);
		}
		$sandbox_url = $config[$sandbox_id]['base_url'];
		$report = $this->analysis_model->getReportByServerId($file_name, $sandbox_id);
		list($analysis_id,$file_name, $file_md5,$xml_url,$cab_url,$pcap_url,$date_created,$dbt_bit_array) = explode(',',$report);
		if($xml_url) $data = $this->analysis_model->getSocketInfo($sandbox_url.'/data/0-10000/1791/1791.xml',$file_name,$process_index, $section);//$xml_url);
		$data['section'] = $section;
		if(count($data) > 0){
			$this->load->view('malware/view_report_section', $data);
		}
		
	}
	
	
		
	
	
	
}
?>