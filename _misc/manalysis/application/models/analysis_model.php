<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Analysis_model extends CI_Model {
	
	private $as_table;
	private $ar_table;
	
	private $_xml;
	
	private $_processList;
	private $_processHierarchy;
	
	private $_network_nodes = array('com_section','inet_helper_section', /*'winsock_op_section',*/'winsock_section');
	
	public function __construct(){
		$this->as_table = 'analysis_submit';
		$this->ar_table = 'analysis_results';
	}
	
	public function saveAnalysisSubmitData($data, $file_name=NULL){
		if(!$file_name){
			$this->db->insert($this->as_table, $data);
		}else{
			$this->db->where('file_name', $file_name);
			$this->db->update($this->as_table, $data);
		}
	}
	
	
	public function getByAnalysisStatus ($status){
		$this->db->where('analysis_status',$status);
		$result = $this->db->get($this->as_table);
		if($result->num_rows() > 0){
			foreach($result->result() as $row):
                $data[] = $row;
            endforeach;
            return $data;
		}
		return FALSE;
	}
	
	public function getReportByServerId ($file_name,$sandbox_id){
		$this->db->select('report');
		$this->db->where(array('file_name' => $file_name, 'sandbox_id' => $sandbox_id));
		
		$result = $this->db->get($this->as_table);
		if($result->num_rows() > 0){
			$row = $result->row();
            return $row->report;
		}
		return FALSE;
	}
	
	
	public function parseReportXml($xml_url, $file_name){
		$data = array();
		$this->load->library('Var_cache');
		
		if(! $string_xml = $this->var_cache->get_var('xml_'.$file_name)){
			// Load simple xml
			$string_xml = file_get_contents($xml_url);
			$this->var_cache->set_var('xml_'.$file_name,$string_xml);
		}
		$this->_xml = simplexml_load_string($string_xml);
		// Load basic Info
		$data['basic_info'] = $this->getBasicInfo();
		// Load Call Tree
		$data['calltree']	= $this->getCallTree();
		
		// Load Processes
		$data['processes']  = $this->getProcesses();
		
		// get network activity data
		$data['network_info']  = $this->getNetworkInfo();
		
		// Load Running Processes
		
		
		
		
		return $data;
		
	}
	
	
	public function getBasicInfo(){
		$data = array();
		if($this->_xml){
			$analysis_node = $this->_xml->xpath('/analysis');
			foreach($analysis_node[0]->attributes() as $attr => $val){
				$val = (array)$val;
				$data[$attr] = $val[0];
			}
			
		}
		return $data;
		
	}
	
	public function getCallTree(){
		$processList = array();
		if($this->_xml){
			$calltree_node = $this->_xml->xpath('/analysis/calltree');
			$processList = array();
			$processList = $this->_getCallTreeProcess($calltree_node[0], $processList);
		}
		return $processList;
		
	}
	
	private function _getCallTreeProcess(SimpleXMLElement $calltree_node, &$processList, $level=1){
		foreach ($calltree_node[0]->children() as $child){
			$attributes = array();
			//Store attributes
			$attributes = array();
			foreach($child->attributes() as $attr => $val){
				$val = (array)$val;
				$attributes[$attr] = $val[0];
				$attributes['level'] = $level;
			}

			$processList[$attributes['index']] = $attributes;

			//Processes recursively
			foreach ($child->children() as $sub){
				if($sub->getName() == 'calltree'){
					$this->_getCallTreeProcess($sub, $processList,  $level+1 );
				}
			}
		}
		return $processList;
	}
	
	public function getAttributes(SimpleXMLElement $node){
		$attributes = array();
		foreach($node->attributes() as $attr => $val){
			$val = (array)$val;
			$attributes[$attr] = $val[0];
		}
		return $attributes;
	}
	
	public function getProcesses(){
		$data = array();
		if($this->_xml){
			$processes_node = $this->_xml->xpath('/analysis/processes');
			
			foreach ($processes_node[0]->children() as $process){
				//Store attributes
				$attributes = $this->getAttributes($process);
				$pIndex = $attributes['index'];
				$data[$pIndex]['basic_info'] = $attributes;
				
				// Now findout the different sections in each process
				foreach ($process->children() as $section){
					$sectionName = $section->getName();
					if(!in_array($sectionName,$this->_network_nodes)){//echo $sectionName."\n";
						$data[$pIndex][$sectionName] = $this->getProcessSection($section);
					}
				}

			}

		}
		return $data;
		
		
	}
	
	public function getProcessSection(SimpleXMLElement $section){
		$data = $attributes = array();
		foreach ($section->children() as $element){
			$attributes = $this->getAttributes($element);
			$data[] = array('name' => $element->getName(),'attr' => $attributes);
		}
		return $data;
		
	}
	
	public function getProcessInfo($xml_url,$file_name,$process_index, $section){
		$data = array();//echo $xml_url;
		$this->load->library('Var_cache');
		
		if(! $string_xml = $this->var_cache->get_var('xml_'.$file_name)){
			// Load simple xml
			$string_xml = file_get_contents($xml_url);
			$this->var_cache->set_var('xml_'.$file_name,$string_xml);
		}
		$this->_xml = simplexml_load_string($string_xml);
		
		if($this->_xml){
			if($section != 'basic_info'){
				$section_node = $this->_xml->xpath('/analysis/processes/process[@index="'.$process_index.'"]/'.$section);
				foreach ($section_node[0]->children() as $sect){
					//Store attributes
					$attributes = $this->getAttributes($sect);
					$data['nodes'][] = $sect->getName();
					$data['node_values'][] = $attributes;
				}
			}else{
				$section_node = $this->_xml->xpath('/analysis/processes/process[@index="'.$process_index.'"]');
				//Store attributes
				$attributes = $this->getAttributes($section_node[0]);
				$data['nodes'][] = $section_node[0]->getName();
				$data['node_values'][] = $attributes;
			}
			
		}else{
			die('Error occured while loading the XML data. Please try again later');
		}
		
		return $data;
	}
	
	public function getNetworkInfo(){
		$data = array();
		$p_nodes = $this->_xml->xpath('/analysis/processes');//p($p_nodes->children());exit;
		foreach ($p_nodes[0]->children() as $p){
			$attributes = $this->getAttributes($p);
			$pIndex = $attributes['index'];
			// Now findout the network sections in each process
			foreach ($p->children() as $section){
				$sectionName = $section->getName();
				if(in_array($sectionName,$this->_network_nodes)){//echo $sectionName."\n";
					$data[$pIndex][$sectionName] = $this->getProcessSection($section);
				}
			}
		}
		return $data;
	}
	
	public function getSocketInfo($xml_url,$file_name,$process_index){
		$data = array();//echo $xml_url;
		$this->load->library('Var_cache');
		
		if(! $string_xml = $this->var_cache->get_var('xml_'.$file_name)){
			// Load simple xml
			$string_xml = file_get_contents($xml_url);
			$this->var_cache->set_var('xml_'.$file_name,$string_xml);
		}
		$this->_xml = simplexml_load_string($string_xml);
		
		if($this->_xml){
			// Get Unknown Connections
			$data['unknown_connections'] = $this->_getUnknownConnectionsData($process_index);
			// Get UDP data
			$data['udp_connections'] = $this->_getUdpConnectionsData($process_index);
			// Get TCP data
			
		}else{
			die('Error occured while loading the XML data. Please try again later');
		}
		
		return $data;
		
		
		
	}
	
	private function _getUnknownConnectionsData($pIndex){
		$data = array();
		$u_conns = $this->_xml->xpath('/analysis/processes/process["@index='.$pIndex.'"]/winsock_section/connections_unknown/connection');
		
		foreach ($u_conns as $i =>  $u_conn){
			$data[$i]['attributes'] = $this->getAttributes($u_conn);
			$y=0;
			foreach ($u_conn->children() as $host){
				$data[$i]['hosts'][$y] = $this->getAttributes($host);
				if(count($h = (array)$host->more_resulting_addr) > 0 ){
					$data[$i]['hosts'][$y]['more_resulting_addr'] = implode('<br/>',$h['resulting_addr']);
				}
				$y++;
			}
			
		}
		return $data;
	}
	
	private function _getUdpConnectionsData($pIndex){
		$data = array();
		$udp_conns = $this->_xml->xpath('/analysis/processes/process["@index='.$pIndex.'"]/winsock_section/connections_udp/connection[@transportprotocol="UDP"]');
		/*foreach ($udp_conns as $i =>  $udp_conn){
			$data[$i]['attributes'] = $this->getAttributes($udp_conn);
			$y=0;
			foreach ($u_conn->children() as $host){
				$data[$i]['hosts'][$y] = $this->getAttributes($host);
				if(count($h = (array)$host->more_resulting_addr) > 0 ){
					$data[$i]['hosts'][$y]['more_resulting_addr'] = implode('<br/>',$h['resulting_addr']);
				}
				$y++;
			}
			
		}*/
		return $data;
	}
	
}


?>