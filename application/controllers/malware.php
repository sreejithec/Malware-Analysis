<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
/**
 * Malware
 * 
 * Controller that handles all malware related operations like, saving the malware send by HomeyPot, submit them for analysis, poll for results,
 * save the reports etc.
 * 
 * 
 * 
 */
class Malware extends QCERT_Controller {
	
	CONST STATUS_NEW 		= 'NEW';
	CONST STATUS_SUBMITTED	= 'SUBM';
	CONST STATUS_DONE 		= 'DONE';
	
	private $_save_path;
	private $_file_param_name;
	
	private $_realm;
	private $_http_user;
	private $_http_pass;
	
	/**
	 * __construct
	 * 
	 *
	 */
	public function __construct(){
		parent::__construct();
		$this->load->model('malware_model');
		
		$this->status_text = array(
								self::STATUS_NEW => 'New',
								self::STATUS_SUBMITTED => 'Submitted',
								self::STATUS_DONE => 'Done'
							 );
		
		$this->_save_path 		= 'analysis/source/';
		$this->_file_param_name = 'upfile';
		
		$this->_http_realm = 'Caution! Higly Inflammable.';
		$this->_http_user = 'dionaea';
		$this->_http_pass = 'manalysis+985_dionaea';
	}

	
	public function listing($page=1){
		$data['status_text'] = $this->status_text;
		$page = ($page) ? (int)$page : 1;
		
		$this->malware_model->start  = $this->malware_model->limit = NULL;
		$this->paginate(count($this->malware_model->getCollection()), base_url().'malware/listing');
		
		$this->malware_model->start  = ((int)$this->uri->segment(PAGE_SEGMENT)) ? $this->uri->segment(PAGE_SEGMENT) : 0;
		$this->malware_model->limit = PER_PAGE;
		
		$data['collection'] = $this->malware_model->getCollection($page);
		$this->render('malware/listing',$data);
	}
	
	public function post_malware(){
		$data = array();
		$this->load->library('form_validation');
		
		if($this->input->post('go') == 'Submit'){
			$this->form_validation->set_error_delimiters('', '|');
			
			$this->form_validation->set_rules('email', 'Email', 'trim|required|xss_clean|valid_email');
			if (!($this->form_validation->run() == FALSE)){
				$this->load->helper('file');
				$sender_email = $this->input->post('email');

				if(!empty($_FILES[$this->_file_param_name]['tmp_name'])){
					$md5      =  md5($this->malware_model->get_malware_content($_FILES[$this->_file_param_name], ''));
					$filename = $_FILES[$this->_file_param_name]['name'];
					// Check for duplicate file
					if(!($this->malware_model->is_duplicate($md5))){
						// Upload the file
						if(write_file($this->_save_path.$md5, $file_content)){
							// Save the file data in database
							$ins = array('filename'=>$filename,
										 'md5'   => $md5,
											'sender_email' => $sender_email,
											'size' => $_FILES[$this->_file_param_name]['size'],
											'received_date' => mktime(),
											'm_count' => 1,
											'commercial_status' => self::STATUS_NEW ,
											'zerowine_status' => self::STATUS_NEW,
									);
							$this->malware_model->insert($ins);

							// Now submit the files for analysis to both servers
							$this->analysis_submit($md5, array('email' => $sender_email));

							if($this->input->post('web') == 1){
								FlashNotice::add('File has been sent for analysis successfully. Please go to Malwares section for the details.', 'success');
							}
						}
					}
					else{
						// We have a duplicate. Just increment the m_count column by one.
						$this->malware_model->increment_m_count($md5);
						if($this->input->post('web') == 1){
							FlashNotice::add('We have this file already in our database.  Please search the Malwares section for the details.', 'info');
						}
					}
				}else{
					
					FlashNotice::add('The File field is required.', 'error');
				}
				
			}else{
				$errors = explode('|',substr(validation_errors(),0,-2));
				FlashNotice::set_messages($errors, 'error');
			}
		}

		$this->render('malware/post_malware', $data);
	}


	public function caught(){
		// HTTP Authentication
		if(!$this->_http_authenticate()){
			
			header('HTTP/1.1 401 Unauthorized');
			header('WWW-Authenticate: Digest realm="'.$this->_realm.
			'",qop="auth",nonce="'.uniqid().'",opaque="'.md5($this->_realm).'"');

			die('Big time, buddy!');
		}
		
		
		$this->load->helper('file');
		$sender_email = $this->input->post('email');
		
		if(!empty($_FILES[$this->_file_param_name]['tmp_name'])){
			$file_content = $this->malware_model->get_malware_content($_FILES[$this->_file_param_name], '');
			$md5      =  md5($file_content);
			$filename = $_FILES[$this->_file_param_name]['name'];
			
			// Check for duplicate file
			if(!($this->malware_model->is_duplicate($md5))){
				// Upload the file
				if(write_file($this->_save_path.$md5, $file_content)){
					// Save the file data in database
					$ins = array('filename'=>$filename,
								 'md5'   => $md5,
									'sender_email' => $sender_email,
									'size' => $_FILES[$this->_file_param_name]['size'],
									'received_date' => mktime(),
									'm_count' => 1,
									'commercial_status' => self::STATUS_NEW ,
									'zerowine_status' => self::STATUS_NEW,
							);
					$this->malware_model->insert($ins);

					// Now submit the files for analysis to both servers
					$this->analysis_submit($md5, array('email' => $sender_email));

					if($this->input->post('web') == 1){
						FlashNotice::add('File has been sent for analysis successfully. Please go to Malwares section for the details.', 'success');
					}
				}
			}
			else{
				// We have a duplicate. Just increment the m_count column by one.
				$this->malware_model->increment_m_count($md5);
			}
		}
	}
	
	private function _http_authenticate(){
		

		//user => password
		$users = array($this->_http_user => $this->_http_pass);


		if (empty($_SERVER['PHP_AUTH_DIGEST'])) {
			return FALSE;
		}


		// analyze the PHP_AUTH_DIGEST variable
		if (!($data = $this->_http_digest_parse($_SERVER['PHP_AUTH_DIGEST'])) || !isset($users[$data['username']]))
			return FALSE;

		// generate the valid response
		$A1 = md5($data['username'] . ':' . $this->_realm . ':' . $users[$data['username']]);
		$A2 = md5($_SERVER['REQUEST_METHOD'].':'.$data['uri']);
		$valid_response = md5($A1.':'.$data['nonce'].':'.$data['nc'].':'.$data['cnonce'].':'.$data['qop'].':'.$A2);
		
		if ($data['response'] != $valid_response)
		 	return FALSE;
		
		 return TRUE;
	}

	private function _http_digest_parse($txt){
		// protect against missing data
		$needed_parts = array('nonce'=>1, 'nc'=>1, 'cnonce'=>1, 'qop'=>1, 'username'=>1, 'uri'=>1, 'response'=>1);
		$data = array();
		$keys = implode('|', array_keys($needed_parts));

		preg_match_all('@(' . $keys . ')=(?:([\'"])([^\2]+?)\2|([^\s,]+))@', $txt, $matches, PREG_SET_ORDER);
		
		foreach ($matches as $m) {
			$data[$m[1]] = $m[3] ? $m[3] : $m[4];
			unset($needed_parts[$m[1]]);
		}

		return $needed_parts ? false : $data;
	}
	
	
	public function view_report($md5, $sandbox='commercial'){
		$data = array();
		$data['md5'] = $md5;
		
		$details = $this->malware_model->get_by_md5($md5);
		$data['filename'] = $details->filename;
		$data['sandbox'] = $sandbox;
		
		$this->render('malware/view_report', $data);
	}
	
	public function analysis_submit($md5, $params){
		// Submit to commercial sandbox
		$response = $this->_analysis_submit_commercial($md5, $params);
		if($response){
			$this->malware_model->save_response('commercial', $md5, $response);
			$this->malware_model->update_status($md5, self::STATUS_SUBMITTED, 'commercial');
			$this->malware_model->add_queue($md5);
		}
		
		//Submit to zerowine sandbox
		$response = $this->_analysis_submit_zerowine($md5);
		if($response){
			$this->malware_model->save_response('zerowine', $md5, $response );
			$this->malware_model->update_status($md5, self::STATUS_DONE , 'zerowine');
		}
	}
	
	private function _analysis_submit_commercial($md5, $params){
		$response = '';
		$this->load->library('commercial', array('md5' => $md5));
		$response = $this->commercial->analysis_submit($this->_save_path.$md5, $params);
		return $response;
	}
	
	private function _analysis_submit_zerowine($md5){
		$response = '';
		$this->load->library('zerowine', array('md5' => $md5));
		$response = $this->zerowine->analysis_submit($this->_save_path.$md5);
		return $response;
	}
	
	public function get_analysis_content(){
		if($this->input->post('sandbox') == 'commercial'){
			$data = array();
			switch ($this->input->post('section')){
				case 'basic_info':
					$this->load->library('Commercial/basic_info',array('md5'=> $this->input->post('file')));
					if($this->basic_info->load_xml()){
						$data['basic_info'] = $this->basic_info->get_basic_info();
						$data['calltree'] = $this->basic_info->get_call_tree();
						$html = $this->load->view('commercial/basic_info', $data, TRUE);
					}else{
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;
					
				case 'file_info':
					$this->load->library('Commercial/file_info',array('md5'=> $this->input->post('file')));
					if($this->file_info->load_xml()){
						$data['file_info'] = $this->file_info->get_process_file_info();
						$html = $this->load->view('commercial/file_info', $data, TRUE);
					}
					else{
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;
					
				case 'registry_info':
					$this->load->library('Commercial/registry_info',array('md5'=> $this->input->post('file')));
					if($this->registry_info->load_xml()){
						$data['registry_info'] = $this->registry_info->get_process_reg_info();
						$html = $this->load->view('commercial/registry_info', $data, TRUE);
					}else{
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;
			
				case 'network_info':
					$this->load->library('Commercial/network_info',array('md5'=> $this->input->post('file')));
					if($this->network_info->load_xml()){
						$data['network_info'] = $this->network_info->get_network_info();
						$html = $this->load->view('commercial/network_info', $data, TRUE);
					}else{
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;

				case 'all_process_info':
					$this->load->library('Commercial/all_process_info',array('md5'=> $this->input->post('file')));
					if($this->all_process_info->load_xml()){
						$data['all_process_info'] = $this->all_process_info->get_all_info();
						$html = $this->load->view('commercial/all_process_info', $data, TRUE);
					}else{
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;
					
				case 'download_info':
					$download_info = $this->malware_model->get_commercial_report($this->input->post('file'));
					
					if(isset($download_info->commercial_analysis_report)){
						$info = array();
						$this->load->library('commercial');
						$server_url = $this->commercial->get_server_url();
						list($id,$md5, $filemd5,$xml,$cab,$pcap,$date_created,$dbt) = explode(',', $download_info->commercial_analysis_report);
						$info['xml_url'] = $server_url.$xml;
						$info['pcap_url'] = $server_url.$pcap;
						$info['cab_url']  = $server_url.$cab;
						$info['dbt']  = $dbt;
						$data['download_info'] = $info;
						$html = $this->load->view('commercial/download_info', $data, TRUE);
					}else {
						$html = '<div class="info">Sorry dude, No data to display!</div>';
					}
					break;
			}
			echo $html;
			exit(0);
		}
		
		if($this->input->post('sandbox') == 'zerowine'){
			$data = array();
			
			$this->load->library('zerowine', array('md5' => $this->input->post('file'), 
										     )
								);
			$current_folder = ($this->input->post('dir')) ? $this->input->post('dir') : '';
			if(! ($html = $this->zerowine->get_file_tree($current_folder))){
				$html = '<div class="info">Sorry dude, No data to display!</div>';
			}
			echo $html;
			exit(0);
			
			
		}
	}
	
	public function get_file(){
		$file = $this->input->get('file', TRUE);
		$type = $this->input->get('type', TRUE);
		$this->load->helper('file');
		
		if(file_exists($file)){
			if($type == 'content'){
				echo file_get_contents($file);
				exit;
			}else{
				$this->load->helper('download');
				force_download(basename($file), file_get_contents($file));
			}
		}
	}
	
	public function submit(){
		echo '
			<form enctype="multipart/form-data" method="POST" action="'.base_url().'malware/caught">
				<input type="text" name="email" value="" />
				<input type="file" name="upfile" /> <input type="submit" value="go" />
			</form>
		';
	}
	
	/**
	 * This will be executed by cron
	 *
	 */
	public function get_commercial_analysis_report(){
		$sub_malwares = $this->malware_model->get_queue();
		if($sub_malwares > 0){
			$this->load->library('commercial');
			foreach ($sub_malwares as $malware){
				$this->commercial->initialize(array('md5' => $malware->md5));
				$response = $this->commercial->poll($malware->md5);
				if($response){
					$this->commercial->save_report_xml($response);
					
					// Now save the outgoing network connections data in the table;
					//$this->load->library('Commercial/network_info',array('md5'=> $malware->md5));
					$this->commercial->load_xml();
					$ips = $this->commercial->get_outgoing_ips();
					if(count($ips) > 0){
						// Get the ips
						$this->load->library('geoiplocate');
						$loc = NULL;
						$cache = array();
						foreach ($ips as $ip){
							$host = preg_match('#^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}#', $ip,$matches);
							if($loc = $this->geoiplocate->getCountry($matches[0])){
								if(in_array($loc['ip_address'], $cache)){
									continue;
								}
								
								$cache[] = $loc['ip_address'];
								$data[] = array (
												'md5'	=> $malware->md5,
												'status_code' => $loc['status_code'],
												'outgoing_ip' => $loc['ip_address'],
												'country_code' => $loc['country_code'],
												'country_name' => $loc['country_name']
											);
							}
						}
						
						$this->malware_model->save_connection_location($data);
					}
					
					if($this->malware_model->save_commercial_report($malware->md5, $response)){
						$this->malware_model->update_status($malware->md5, self::STATUS_DONE );
						$this->malware_model->delete_queue($malware->md5);
					}
				}

			}
		}
		
	}

	
	
	public function get_graph(){
		$range = $this->input->post('t');
		if($this->malware_model->get_graph($range)){
			$data = $this->malware_model->get_graph_desc($range);
			$html = $this->load->view('graph', $data, TRUE);
			echo json_encode(array('html' => $html));
			exit(1);
		}else{
			echo '<div class="info">Sorry dude, Nothing to display.</div>';
		}
		
		
	}
	
}
?> 