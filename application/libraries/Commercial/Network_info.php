<?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed');
include APPPATH.'libraries/Commercial.php';
class Network_info extends Commercial {
	
	private $_process_list = array();
	
	public function __construct($config=array()){
		if(!empty($config)){
			$this->initialize($config);
		}
	} 
	
	public function get_process_list(){
		if(empty($this->_process_list)){
			$this->_process_list = $this->get_processes();
		}
		return  $this->_process_list;
		
	}
	
	
	public function get_network_info(){
		$data = array();
		$processes = $this->get_process_list();
		
		foreach ($processes as $p){
			// created sockets
			$data[$p['index'].'#'.$p['pid']]['socket_info'] = $this->get_process_socket_info($p['index']);
			// unknown connections
			$data[$p['index'].'#'.$p['pid']]['conn_unknown_info'] = $this->get_conn_unknown_info($p['index']);
			$data[$p['index'].'#'.$p['pid']]['udp_info'] = $this->get_process_udp_info($p['index']);
			$data[$p['index'].'#'.$p['pid']]['tcp_nonhttp_info'] = $this->get_process_tcp_nonhttp_info($p['index']);
			$data[$p['index'].'#'.$p['pid']]['tcp_http_info'] = $this->get_process_tcp_http_info($p['index']);
			$data[$p['index'].'#'.$p['pid']]['dns_info'] = $this->get_dns_info($p['index']);
		}
		return $data;
	}
/***************************************************** Socket Info Methods *****************************************************************/	
	public function get_process_socket_info($index){
		$data = array();
		$created_sockets = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_op_section/create_socket');
		if($created_sockets){
			$data = array();
			// get the following info regarding each socket
			// socket, type, remote_addr, remote_port, hostname, send_data, recv_data
			foreach ($created_sockets as $socket){
				$sock = $this->get_attributes($socket);
				$connection_details = $this->get_process_socket_conn($index, $socket['socket']);
				if(count($connection_details) > 0){
					foreach ($connection_details as $conn){
						$sock['connection_details'][0]	= $conn;
						$data[] = $sock;
					}
				}
				else{
					$sock['connection_details'] = $connection_details;
					$data[] = $sock;
				}
			}
			
			return $data;
		}
		
		
	}
	
	
	public function get_process_socket_conn($index, $sock){
		$sock_conn = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_op_section/connect_socket[@socket="'.$sock.'"]');
		$data = array();
		foreach ($sock_conn as $k => $conn){//p($conn);
			if(is_a($conn, 'SimpleXMLElement')){
				$details[$k] = $this->get_attributes($conn);
				$details[$k]['send_data'] = $this->get_process_socket_send_data($index, $sock, $conn['remote_addr']);
				$details[$k]['recv_data'] = $this->get_process_socket_recv_data($index, $sock, $conn['remote_addr']);
				
				$data[] = $details[$k];
			}
			
		}
		
		return $data;
	}
	
	public function get_process_socket_send_data($index, $sock, $remote_addr){
		$dump = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_op_section/send_socket[@socket="'.$sock.'" and preceding-sibling::connect_socket[1][@remote_addr="'.$remote_addr.'"]]/dump_line');
		
		$data = '';
		if($dump){
			foreach ($dump as $line){
				$data = $data.$line['ascii'];
			}
		}
		return $data;
	}
	
	public function get_process_socket_recv_data($index, $sock, $remote_addr){
		$dump = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_op_section/recv_socket[@socket="'.$sock.'" and preceding-sibling::connect_socket[1][@remote_addr="'.$remote_addr.'"]]/dump_line');
		$data = '';
		if($dump){
			foreach ($dump as $line){
				$data = $data.$line['ascii'];
			}
		}
		return $data;
	}
	
/***************************************************END of Socket Info methods ************************************************************/

/******************************************************* Unknown Connection Info ********************************************************/
	public function get_conn_unknown_info($index){
		$d = array();
		$u_conns = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_section/connections_unknown/connection/gethostbyname');
		if($u_conns){
			foreach ($u_conns as $i =>  $u_conn){
				$data = array();
				$u = $this->get_attributes($u_conn[0]);
				$data = @array('requested_host' => $u['requested_host'], 'resulting_addr' => $u['resulting_addr'], 'error_code' => $u['error_code']);
				
				foreach ($u_conn->children() as $host){
					$h = (array)$host;
					if(count($h['resulting_addr']) >0 ){
						$data['resulting_addr'] = $data['resulting_addr'].', '.implode(', ',$h['resulting_addr']);
					}
				}
				$d[] = $data;
			}
		}
		return $d;
	}
/******************************************************* Unknown Connection Info ********************************************************/

/******************************************************	 UDP datagram Info *******************************************************************/
	public function get_process_udp_info($index){
		$d = array();
		$datagram = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_section/connections_udp/connection/send_datagram');
		if($datagram){
			foreach ($datagram as $k => $dg){
				$data = $this->get_attributes($dg);
				
				// get the send data
				$send_data = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_section/connections_udp/connection/plain_communication_data/send['.($k+1).']/dump_line');
				$dump = '';
				if($send_data){
					foreach ($send_data as $line){
						$dump = $dump.$line['ascii'];
					}
				}
				$data['send_data'] = $dump;

				$d[] = $data;
			}
			
		}
		return $d;
		
	}

/**********************************************	END of UDP datagram Info *******************************************************************/

/******************************************************	 TCP Non-HTTP Info *******************************************************************/
	public function get_process_tcp_nonhttp_info($index)	{
		$d = array();
		$tcp = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_section/connections_outgoing/connection[@transportprotocol="TCP" and not(@protocol="HTTP")]');
		if($tcp) {
			foreach ($tcp as $k => $nt){
				$data = $this->get_attributes($nt);
				
				
				if(isset($nt->plain_communication_data)){
					
					// get the send data
					$send = '';
					if(is_object($nt->plain_communication_data->send)){
						foreach ($nt->plain_communication_data->send as $dump_line){
							if($dump_line->count() > 0){
								foreach ($dump_line as $line){
									$send = $send.$line['ascii'];
								}
							}else{
								$send = $send.$dump_line['ascii'];
							}
						}
					}
					$data['send_data'] = $send;
					// Get the recv data
					$recv = '';
					if(is_object($nt->plain_communication_data->recv)){
						foreach ($nt->plain_communication_data->recv as $dump_line){
							if($dump_line->count() > 0){
								foreach ($dump_line as $line){
									$recv = $recv.$line['ascii'];
								}
							}else{
								$recv = $recv.$dump_line['ascii'];
							}
						}
					}
					$data['recv_data'] = $recv;
				}else{
					$data['send_data'] = $data['recv_data'] = '';
				}
				$d[] = $data;
			}
		}
		return $d;
	}
/********************************************	 END of TCP Non-HTTP Info *******************************************************************/

/******************************************************	 TCP HTTP Info *******************************************************************/
	public function get_process_tcp_http_info($index){
		$d = $data = array();
		$tcp = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_section/connections_outgoing/connection[@transportprotocol="TCP" and @protocol="HTTP"]');
		//p($tcp);
		if($tcp) {
			foreach ($tcp as $ht){
				$data = $this->get_attributes($ht);
				if(isset($ht->http_data->http_cmd)){
					$data = array_merge($data, $this->get_attributes($ht->http_data->http_cmd));

					// Get the headers
					$head = '';
					if(isset($ht->http_data->http_cmd->header_data->header)){
						foreach ($ht->http_data->http_cmd->header_data->header as $header){
							$head = $head.'<br />'.$header;
						}
					}
					$data['headers'] = $head;

					// Get send data
					if(isset($ht->plain_communication_data)){
						// get the send data
						$send = '';
						if(is_object($ht->plain_communication_data->send)){
							
							foreach ($ht->plain_communication_data->send->dump_line as $dump_line){
								$ascii = $dump_line['ascii'];
								$send = $send.$ascii;
							}
						}
						$data['send_data'] = $send;
						// Get the recv data
						$recv = '';
						if(is_object($ht->plain_communication_data->recv)){

							foreach ($ht->plain_communication_data->recv->dump_line as $dump_line){
								$ascii = $dump_line['ascii'];
								$recv = $recv.$ascii;
							}

						}
						$data['recv_data'] = $recv;
					}else{
						$data['send_data'] = $data['recv_data'] = '';
					}
				}
				$d[] = $data;
			}
		}
		return $d;
	}

/****************************************************** END OF TCP HTTP Info ***************************************************************/

/**************************************************************** DNS Info ***************************************************************/
	public function get_dns_info($index){
		$d = array();
		$hosts = $this->_xml->xpath('/analysis/processes/process[@index="'.$index.'"]/winsock_op_section/get_host_by_name');
		if($hosts){
			foreach ($hosts as $host){
				$d[] = array('remote_addr'=> $host['remote_addr'], 'hostname'=> $host['hostname']);
			}
		}
		return $d;
	}
/************************************************************END of DNS Info ***************************************************************/

	

}



?>