<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');
class Graph {
	
	private $type;
	private $_pchart_path;
	public $_pdata;
	public $_pic;
	private $_pallete;
	
	public function __construct(){
		$this->_pchart_path = APPPATH.'third_party/pchart/';
		$this->_pallete = $this->_pchart_path."palettes/qcert.color";

		include($this->_pchart_path.'class/pData.class.php');
		include($this->_pchart_path.'class/pDraw.class.php');
		include($this->_pchart_path.'class/pImage.class.php');

		$this->start();
	}
	
	public function start(){
		/* Create pData object */
		$this->_pdata = new pData();
	}
	
	

	public function setSerie($points, $serie,$name, $axis, $tick=0, $weight=0){
		$this->_pdata->addPoints($points,$serie);
		$this->_pdata->setSerieDescription($serie,$name);
		$this->_pdata->setSerieOnAxis($serie,$axis);
		
		if($tick){
			$this->_pdata->setSerieTicks($serie,4);
		}
		if($weight){
			$this->_pdata->setSerieWeight($serie,$weight);
		}
	}
	
	public function setAxis($value, $name){
		 $this->_pdata->setAxisName($value,$name); 
	}
	
	public function setAxisDisplay($a,$b,$c){
		 $this->_pdata->setAxisDisplay($a,$b,$c);
	}
	public function setAbsissa($points,$serie,$name){
		$this->_pdata->addPoints($points,$serie);
		$this->_pdata->setSerieDescription($serie,$name);
		$this->_pdata->setAbscissa($serie);
	}
	
	public function setSerieColor($rgb,$serie,$alpha=80){
		$serieSettings = array("R"=>$rgb[0],"G"=>$rgb[1],"B"=>$rgb[2],"Alpha"=>$alpha);
		$this->_pdata->setPalette($serie,$serieSettings);
	}
	
	public function setCanvas($w, $h){
		
		
		$this->_pic = new pImage($w,$h,$this->_pdata); 
		$this->_pic->Antialias = FALSE;
		$this->_pic->drawRectangle(0,0,$w-1,$h-1,array("R"=>0,"G"=>0,"B"=>0));
		
		 //$this->_pic->setFontProperties(array("FontName"=>APPPATH."third_party/pchart/fonts/Forgotte.ttf","FontSize"=>11));
 //$this->_pic->drawText(150,35,"Average temperature",array("FontSize"=>20,"Align"=>TEXT_ALIGN_BOTTOMMIDDLE));

		
	}
	
	public function setAntialias($bool){
		$this->_pic->Antialias = $bool;
	}
	
	public function setDefaultFont($ttf, $size){
		/* Set the default font */
		$this->_pic->setFontProperties(array("FontName"=> $this->_pchart_path."fonts/".$ttf,"FontSize"=>$size));
	}
	
	public function setGraphArea($x1,$y1,$x2,$y2){
		/* Define the chart area */
		$this->_pic->setGraphArea($x1,$y1,$x2,$y2);
	}
	
	public function drawScale(){
		/* Draw the scale */
		$scaleSettings = array("XMargin"=>10,"YMargin"=>10,"Floating"=>TRUE,"GridR"=>200,"GridG"=>200,"GridB"=>200,"DrawSubTicks"=>TRUE,"CycleBackground"=>FALSE,"Mode"=>SCALE_MODE_START0);
		$this->_pic->drawScale($scaleSettings);
	}
	public function drawScaleVertical(){
		/* Draw the scale */
		$scaleSettings =array("CycleBackground"=>TRUE,"DrawSubTicks"=>TRUE,"GridR"=>0,"GridG"=>0,"GridB"=>0,"GridAlpha"=>10,"Pos"=>SCALE_POS_TOPBOTTOM,"Mode"=>SCALE_MODE_START0);
		$this->_pic->drawScale($scaleSettings);
	}
	
	public function drawLineChart(){
		/* Turn on Antialiasing */
		$this->_pic->Antialias = TRUE;

		/* Draw the line chart */
		$this->_pic->drawLineChart();
		
	}
	
	public function drawBarChart(){
		$this->_pic->drawBarChart(array("DisplayPos"=>LABEL_POS_INSIDE,"DisplayValues"=>TRUE,"Rounded"=>TRUE,"Surrounding"=>30));
	}
	
	public function legend($x,$y){
		/* Write the chart legend */
		$this->_pic->drawLegend($x,$y,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_HORIZONTAL));
	}
	
	public function out($file=NULL){
		if(!$file){
			$this->_pic->stroke();//render(APPPATH."example.drawLineChart.simple.png"); ;//autoOutput("pic.png");
		}else{
			$this->_pic->render($file);
		}
	}
	
	public function loadPalette(){
		$this->_pdata->loadPalette($this->_pallete, TRUE);
	}
	
	
	public function draw(){
		$this->start();
		
		$this->setSerie(array(25,12,15,8,5,0),'Infected Incidents', 'Infected Incidents', 0, 0);
		$this->setSerie(array(2,7,5,18,19,90),'Not Infected Incidents', 'Not Infected Incidents', 0, 1);

		$this->_pdata->loadPalette($this->_pchart_path."palettes/qcert.color", TRUE);
		//$this->setSerieColor(array(229,10,10),'Infected Incidents', 100);
		//$this->setSerieColor(array(0,255,0),'Not Infected Incidents', 100);
		
		$this->setAxis(0, 'Incidents');

		$this->setAbsissa(array("Jan","Feb","Mar","Apr","May","Jun"), 'months', 'Months');
		
		$this->setCanvas(700, 230);

		$this->setDefaultFont('pf_arma_five.ttf', 10);

		/* Define the chart area */
		$this->setGraphArea(60,30,680,210);

		$this->drawScale();
		
		$this->chart();

		$this->legend(350, 20);

		$this->out();

	}


	public function drawVertical(){


		/* Create and populate the pData object */
		$MyData = new pData();
		$MyData->addPoints(array(13251,4118,3087,1460,1248,156,26,9,8),"Hits");
		$MyData->setAxisName(0,"Hits");
		$MyData->addPoints(array("Firefox","Chrome","Internet Explorer","Opera","Safari","Mozilla","SeaMonkey","Camino","Lunascape"),"Browsers");
		$MyData->setSerieDescription("Browsers","Browsers");
		$MyData->setAbscissa("Browsers");
		$MyData->setAbscissaName("Browsers");
		$MyData->setAxisDisplay(0,AXIS_FORMAT_METRIC,1);

		/* Create the pChart object */
		$myPicture = new pImage(500,500,$MyData);

		$myPicture->setFontProperties(array("FontName"=>$this->_pchart_path."/fonts/pf_arma_five.ttf","FontSize"=>10));

		/* Draw the chart scale */
		$myPicture->setGraphArea(100,30,480,480);
		$myPicture->drawScale(array("CycleBackground"=>TRUE,"DrawSubTicks"=>TRUE,"GridR"=>0,"GridG"=>0,"GridB"=>0,"GridAlpha"=>10,"Pos"=>SCALE_POS_TOPBOTTOM)); //

		/* Draw the chart */
		$myPicture->drawBarChart(array("DisplayPos"=>LABEL_POS_INSIDE,"DisplayValues"=>TRUE,"Rounded"=>TRUE,"Surrounding"=>30));

		/* Write the legend */
		$myPicture->drawLegend(570,215,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_HORIZONTAL));

		/* Render the picture (choose the best way) */
		$myPicture->autoOutput();
	}

}

?>