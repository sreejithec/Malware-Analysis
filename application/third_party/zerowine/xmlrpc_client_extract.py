#!/usr/bin/env python

import os
import sys
import time
import base64
import pprint
import random
import pefile
import peutils
import sqlite3

# Added by Sreejith
import tarfile

from hashlib import md5
from xml.sax.saxutils import unescape
from xmlrpclib import ServerProxy

MAX_RETRIES = 5
CONFIG_FILENAME = "servers.conf"

def doLog(msg):
    print "[%s] %s" %(time.ctime(), msg)

def checkPacker(the_file):
    try:
        pe  = pefile.PE(the_file, fast_load=True)
        sig = peutils.SignatureDatabase("UserDB.TXT")
        matches = sig.match_all(pe, ep_only = True)
    except:
        matches = None

    if not matches:
        return None

    return matches

def createSchema(conn):
    try:
        sql = """ create table unpacking (md5, filename, packer, correct) """
        cur = conn.cursor()
        cur.execute(sql)
    except:
        pass

def updateDatabase(filename, packers, correct):
    conn = sqlite3.connect("packers.sqlite")
    createSchema(conn)
    
    sql = """ insert into unpacking values (?, ?, ?, ?) """
    cur = conn.cursor()
    values = (md5(file(filename, "rb").read()).hexdigest(), filename, str(packers), str(correct))
    cur.execute(sql, values)
    conn.commit()
    cur.close()
    
    conn.close()

def connect(url):
    if url == "auto": # Not an URL, but a configuration option
        servers = file(CONFIG_FILENAME, "r").readlines()
        # Randomize the list for load balancing
        random.shuffle(servers)
        
        for server in servers:
            if server == "" or server.startswith("#"):
                continue
            
            s = connect(server)
            
            if s is not None:
                return s
        
        doLog("No server is available!")
        sys.exit(1)
    else:
        url = url.strip("\r").strip("\n")
        s = ServerProxy(url, allow_none=True)
        
        try:
            status = s.ping()
            doLog("Checking server %s status: %s" %(url, status))
            
            if status != "[ALIVE]":
                return None
        except:
            doLog("Error:" + str(sys.exc_info()[1]))
            return None
        
        return s

def main(url, filename, output, retries = 0):
    
    debug = False

    if retries > MAX_RETRIES:
        doLog("Error: Too many retries (%d), exitting..." % MAX_RETRIES)
    
    s = connect(url)

    if s is None:
        doLog("No server available")
        sys.exit(1)

    basename = os.path.basename(filename)
    ret = checkPacker(filename)
    packers = ret
    
    if ret and debug == True:
        if len(ret) > 0:
            doLog("Dumping file %s packed with:" % basename)
            pprint.pprint(ret)

    buf = file(filename, "rb").read()
    origbuf = buf
    buf = base64.b64encode(buf)
    
    #print "Dumping file %s to %s" % (filename, output)
    try:
        ret = s.dump(buf, 10)
    except:
        doLog("Error running dump (%s), retry number %d..." % (sys.exc_info()[1], retries))
        main(url, filename, output, retries+1)
    
    i = 0
    if not ret:
        doLog("Error: No response received!")
        return

    if ret.has_key("dump"):
        for buf in ret["dump"]:
            buf = base64.b64decode(buf)
            
            if len(buf) > 0:
                i += 1
                doLog("Writting dumped file num %d [DONE]" % i)
                f = file(output + os.sep + basename + ".dump", "wb")
                f.write(buf)
                f.close()
    
    if ret["report"]:
        doLog("Writting behavior report [DONE] ")
        f = file(output + os.sep + basename + ".rpt", "wb")
        for line in ret["report"]:
            if line:
                f.write(unescape(line))
        f.close()

    if ret["dropped"]:
        doLog("Writting dropped files [DONE] ")
        f = file(output + os.sep + basename + ".tgz", "wb")
        f.write(base64.b64decode(ret["dropped"]))
        f.close()
	
	# Now extract the tar file, Added by Sreejith
	tar = tarfile.open(output + os.sep + basename + ".tgz")
	tar.extractall(output + os.sep + basename)
	tar.close()
	doLog("Extracting the tar.gz file [DONE]")
	
	# Delete the tar.gz file.
	os.remove(output + os.sep + basename + ".tgz")
	doLog("Deleting the tar.gz file [DONE]")

    if i == 0:
        doLog("Dumping: [FAILED]")
        """
        f = file(output + os.sep + basename + ".failed", "wb")
        f.write(origbuf)
        f.close()
        """
        updateDatabase(filename, packers, False)
        
    else:
        doLog("Dumping: [DONE]")
        updateDatabase(filename, packers, True)

def usage():
    print "Usage:", sys.argv[0], "<url | auto> <filename> <output directory>"
    print

if __name__ == "__main__":
    if len(sys.argv) < 4:
        usage()
        sys.exit(0)
    else:
        main(sys.argv[1], sys.argv[2], sys.argv[3])


