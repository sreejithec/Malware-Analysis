<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Malware_model extends CI_Model {
	#private $_malware_table = 'malware_file';
	private $_table;
	private $_queue_table;
	private $_conn_table;
	
	public $start;
	public $limit;
	
	private $_log_path;
	protected $_date_fmt	= 'Y-m-d H:i:s';
	
	public function __construct(){
		$this->_table = 'tbl_malware';
		$this->_queue_table = 'tbl_queue';
		$this->_conn_table = 'tbl_malware_connections';
		
		$this->start = 0;
		$this->limit = 5;
		
		$config =& get_config();
		$this->_log_path = ($config['log_path'] != '') ? $config['log_path'] : APPPATH.'logs/';
	}
	
	public function getCollection(){
		$sql = 'SELECT * FROM '.$this->_table.' WHERE 1 ORDER BY received_date DESC';
		if( isset($this->start) && isset($this->limit)){
			$sql .= ' LIMIT '.$this->start.', '.$this->limit;
		}
		
		$result = $this->db->query($sql);
		if($result->num_rows() > 0){
			foreach($result->result() as $row):
                $data[] = $row;
            endforeach;
            return $data;
		}
		return FALSE;
	}
	
	public function getSearchResults($k = NULL){
		if(!$k){
			return $this->getCollection();
		}else{
			$sql = 'SELECT * FROM '.$this->_table.' WHERE (
															(filename LIKE "%'.$this->db->escape_like_str($k).'%")
															 OR (sender_email LIKE "%'.$this->db->escape_like_str($k).'%")
															)';
			if( isset($this->start) && isset($this->limit)){
				$sql .= ' LIMIT '.$this->start.', '.$this->limit;
			}
			
			$result = $this->db->query($sql, $k);
			if($result->num_rows() > 0){
				foreach($result->result() as $row){
					$data[] = $row;
				};
				return $data;
			}
		}
		return FALSE;
	}
	
	public function getByFileName ($filename){
		$this->db->where('filename',$file_name);
		$result = $this->db->get($this->_table);
		if($result->num_rows() > 0){
            return $result->row();
		}
		return FALSE;
	}
	
	public function get_by_md5 ($md5){
		$this->db->where('md5',$md5);
		$result = $this->db->get($this->_table);
		if($result->num_rows() > 0){
            return $result->row();
		}
		return FALSE;
	}
	
	public function do_upload($file_name, $path)	{
		$config['file_name'] = $file_name;
		$config['upload_path'] = $path;
		$config['allowed_types'] = '*';

		$this->load->library('upload', $config);
		
		return ($this->upload->do_upload("upfile") == TRUE);
	}
	
	public function is_duplicate($md5){
		$this->db->where('md5',$md5);
		return $this->db->count_all_results($this->_table);
	}


	public function insert($ins){
		if(!empty($ins)){
			$this->db->insert($this->_table,$ins);
		}
	}

	public function increment_m_count($md5){
		$this->db->set('m_count', 'm_count+1', FALSE);
		$this->db->where('md5',$md5);
		$this->db->update($this->_table);
	}
	
	public function save_response($sandbox, $md5, $response='', $status="SUBM"){
		$this->db->set($sandbox.'_submit_response', $response);
		$this->db->set($sandbox.'_status', $status);
		$this->db->where('md5',$md5);
		$this->db->update($this->_table);
	}
	
	public function update_status($md5, $status, $sandbox='commercial'){
		$this->db->set($sandbox.'_status', $status);
		$this->db->where('md5',$md5);
		$this->db->update($this->_table);
	}
	
	public function add_queue($md5){
		return $this->db->insert($this->_queue_table, array('md5' => $md5));
	}
	
	public function delete_queue($md5){
		return $this->db->delete($this->_queue_table, array('md5'=>$md5));
	}
	
	public function get_queue(){
		$result = $this->db->get($this->_queue_table);
		if($result->num_rows() > 0){
			foreach($result->result() as $row):
				$data[] = $row;
            endforeach;
            return $data;
		}
		return FALSE;
	}
	
	public function save_commercial_report($md5, $report=''){
		if($report){
			$this->db->set('commercial_analysis_report', $report);
			$this->db->where('md5', $md5);
			return $this->db->update($this->_table);
		}
	}
	
	public function get_commercial_report($md5){
		$this->db->select('commercial_analysis_report');
		$result = $this->db->get_where($this->_table, array('md5'=>$md5));
		if($result->num_rows() > 0){
            return $result->row();
		}
		return FALSE;
	}
	
	public function save_connection_location($info){
		return @$this->db->insert_batch($this->_conn_table, $info)	;
	}
	
	public function get_malware_count_by_date($from, $to){
		$this->db->where(array('received_date >=' => $from, 'received_date <=' => $to));
		return $this->db->count_all_results($this->_table);
		
	}
	
	
	public function get_malware_content($_files, $password='', $tmp = 'analysis/tmp/'){
		$file_content = '';
		// Copy to temp location
		copy($_files['tmp_name'], $tmp.$_files['name']);
		if(in_array($_files['type'], array('application/zip', 'application/x-zip-compressed', 'multipart/x-zip', 'application/x-compressed'))){
			// get to files in the zip
			$files_string = shell_exec(escapeshellcmd('zipinfo -1 "'.$tmp.$_files['name'].'"'));
			$files_list = explode('<br />', nl2br($files_string));
			// get the first file content in the zip file
			foreach ($files_list as $file){
				if($file_content = trim(shell_exec(escapeshellcmd('unzip -P "'.$password.'" -p "'.$tmp.$_files['name'].'" "'.$file.'"')))){
					break;
				}
			}
		}else{
			$file_content = read_file($tmp.$_files['name']);
		}
		
		return $file_content;
		
	}
	
	
	
	public function get_graph($range){
		$yData = $this->get_time_data($range);
		$x_inf = $x_notinf = $y = array();
		
		foreach ($yData as $y_data){
			$y[] = $y_data['y_value'];
			$x_inf[] = $this->get_malware_count_by_date($y_data['from_ts'], $y_data['to_ts']);
		}
		
		$this->load->library('graph');
		
		
		$this->graph->start();
		
		$this->graph->setSerie($x_inf,'Malwares Reported', 'Malwares Reported', 0, 0);

		$this->graph->loadPalette();
		//$this->graph->setSerieColor(array(229,10,10),'Infected Incidents', 100);
		//$this->graph->setSerieColor(array(0,255,0),'Not Infected Incidents', 100);
		
		$this->graph->setAxis(0, 'Malwares Reported');

		$this->graph->setAbsissa($y, 'day', 'Time');
		
		$this->graph->setCanvas(940, 230);

		$this->graph->setDefaultFont('verdana.ttf', 8);

		/* Define the chart area */
		$this->graph->setGraphArea(45,30,900,210);

		$this->graph->drawScale();
		
		$this->graph->drawLineChart();
		
		$this->graph->legend(350, 20);

		if(is_file('analysis/stats/stat-graph.png')){
			unlink('analysis/stats/stat-graph.png');
		}
		
		$this->graph->out('analysis/stats/stat-graph.png');
		return TRUE;
		
	}
	
	public function get_graph_desc($range){
		$y_data = $this->get_time_data($range);
		$from = $y_data[0]['from_ts'];
		$to   = $y_data[count($y_data)-1]['to_ts'];
		$all_count = $this->get_malware_count_by_date($from, $to);
		return (array('from' => $from, 'to' => $to, 'all_count' => $all_count));
	}
	
	/**
	 * get the data for Y-Axis according to $graph_type
	 *
	 */
	public function get_time_data($range){
		$val = array();
		$now = date('Y-m-d');
		switch($range){
			default:
			case 'today':	
				$from = strtotime(date('Y-m-d 00:00:00'));
				$i = 0;
				for($i=0; $i<24;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+3599,
								 'y_value' => date('h:i', $from+(60*60))
								);
					$from = $from+(60*60);			
				}
				break;
				
			case 'yest':	
				$from = strtotime(date('Y-m-d 00:00:00'))-86400;
				$i = 0;
				for($i=0; $i<24;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+3599,
								 'y_value' => date('h:i', $from+(60*60))
								);
					$from = $from+(60*60);			
				}
				break;	
				
			case 'thisweek':
				list($from,$to) = $this->week_range($now);
				$i = 0;
				for($i=0; $i<7;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+86399,
								 'y_value' => date('Y-m-d', $from)
								);
					$from = $from+86400;			
				}
				break;
				
			case 'lastweek':
				list($from,$to) = $this->week_range(date('Y-m-d',strtotime('-1 week')));
				$i = 0;
				for($i=0; $i<7;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+86399,
								 'y_value' => date('Y-m-d', $from)
								);
					$from = $from+86400;			
				}
				break;	
			case 'thismonth';
				$first_second = date('Y-m-d', strtotime('first day of this month')).' 00:00:00';
				$from = strtotime($first_second);
				$num_days = date('t');
				for($i=0; $i<$num_days;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+86399,
								 'y_value' => date('d', $from)
								);
					$from = $from+86400;			
				}
				break;
			case 'lastmonth';
				$first_second = date('Y-m-d', strtotime('first day of last month')).' 00:00:00';
				$from = strtotime($first_second);
				$num_days = date("t", mktime(0,0,0, date("n") - 1));
				for($i=0; $i<$num_days;$i++){
					$val[$i] = array(
								 'from_ts' => $from,
								 'to_ts'   => $from+86399,
								 'y_value' => date('d', $from)
								);
					$from = $from+86400;			
				}
				break;	
				
				
		}
		
		return $val;
	}
	
	public function week_range($date) {
		$ts = strtotime($date);
		$start = (date('w', $ts) == 0) ? $ts : strtotime('last sunday', $ts);
		return array($start, strtotime('next saturday', $start)+86399);
	}

	public function last_month_range($date){
		$first_second = date('Y-m-d', strtotime('first day of last month')).' 00:00:00';
		$first_second_ts = strtotime($first_second);
		$last_second_ts = strtotime('last day of last month');
		return array($first_second_ts, $last_second_ts);
	}
	
	public function write_log($level = 'error', $msg, $php_error = FALSE)
	{

		$filepath = $this->_log_path.'log-'.date('Y-m-d').EXT;
		$message  = '';

		if ( ! file_exists($filepath))
		{
			$message .= "<"."?php  if ( ! defined('BASEPATH')) exit('No direct script access allowed'); ?".">\n\n";
		}

		if ( ! $fp = @fopen($filepath, FOPEN_WRITE_CREATE))
		{
			return FALSE;
		}

		$message .= $level.' '.(($level == 'INFO') ? ' -' : '-').' '.date($this->_date_fmt). ' --> '.$msg."\n";

		flock($fp, LOCK_EX);
		fwrite($fp, $message);
		flock($fp, LOCK_UN);
		fclose($fp);

		@chmod($filepath, FILE_WRITE_MODE);
		return TRUE;
	}

	





}
?>